

import java.util.ArrayList;
import java.util.Arrays;    
import java.util.List;

/**
 * @author 小晨Yu呀！
 * @ 2021/5/11 16:20
 *
 * 解决递归调用中的：分支污染问题
 *      题目：给定一个数组nums=[2，3，5]和一个固定的值target=8。
 *          找出数组sums中所有可以使数字和为target的组合
 */
public class RecursionCodeTest02 {
    public static void main(String[] args) {
        List<Integer> list = new ArrayList<>();
        int[] num = {2,3,5};
        int target = 8;
        //combinationSum1(list,num,target);
        //combinationSum2(list,num,target);
        combinationSum3(list,num,target);
    }

    /**
     * 第一次写法：导致出现了分支污染问题，这个需要看具体的代码
     *           与算法、结果来判断是否会出现分支污染问题
     * @param cur 当前的路径保存的数据情况
     * @param num 从什么地方获取的数据数组
     * @param target 现在还差多少的数据大小完成路径结束
     */

    public static void combinationSum1(List<Integer> cur,int[] num,int target){
        // 终止条件
        if(target == 0){
            System.out.println(Arrays.toString(cur.toArray()));
        }
        // 道理这里就说明还没有选择完毕，那就选择吧
        for (int i = 0; i < num.length; i++) {
            // 这个使选择每一个数据，从数组当中
            // 首先判断你选择的数据是否已经大于target了，大雨了就不需要继续查找组合了
            if(num[i] > target)     { continue; }
            // 到了这里及说明数据是正常的，那就保存到现有的集合当中，就是选择的数据
            cur.add(num[i]);
            // 然后在递归调用，继续选择数据
            combinationSum1(cur,num,target - num[i]);
        }
    }
    /**
     * 解决分支污染问题，但是代码还是不够优化，会影响运行效率以及空间复杂度
     * @param cur 当前的路径保存的数据情况
     * @param num 从什么地方获取的数据数组
     * @param target 现在还差多少的数据大小完成路径结束
     */
    public static void combinationSum2(List<Integer> cur,int[] num,int target){
        if(target == 0){
            // 回推墙，终止条件
            System.out.println(Arrays.toString(cur.toArray()));
            return;
        }
        for (int i = 0; i < num.length; i++) {
            if(num[i] > target) { continue; }
            // 创建新的分支集合保存 新的分支 储存数据的内容，防止数据污染
            // 这里在创建新的集合时传入旧的集合作作为参数，就是之前的路径保存的数据
            List<Integer> newCur = new ArrayList<>(cur);
            newCur.add(num[i]);
            // 重新递归调用
            combinationSum2(newCur,num,target - num[i]);
        }
    }

    /**
     * 成功解决分支污染问题、时间复杂度【运行太费时】、空间复杂度过大问题
     * 用了回溯的算法思想【这个还得慢慢学，这是第一次接触回溯思想】
     * @param cur  当前的路径保存的数据情况
     * @param num 从什么地方获取的数据数组
     * @param target 现在还差多少的数据大小完成路径结束
     */
    public static void combinationSum3(List<Integer> cur,int[] num,int target){
        if(target == 0){
            System.out.println(Arrays.toString(cur.toArray()));
            return;
        }
        for (int i = 0; i < num.length; i++) {
            if(num[i] > target) { continue; }
            cur.add(num[i]);
            combinationSum3(cur,num,target - num[i]);
            cur.remove(cur.size() - 1);
        }
    }
}
