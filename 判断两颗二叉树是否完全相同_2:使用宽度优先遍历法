
import java.util.LinkedList;
import java.util.Queue;

/**
 * @author 小晨Yu呀!
 * @time 2021-06-24
 */
public class LeetTreeTest01{
    public static void main(String[] args){
        // 准备第一棵树
        TreeNode p = new TreeNode(1);
        TreeNode p1 = new TreeNode(2);
        TreeNode p2 = new TreeNode(3);
        TreeNode p3 = new TreeNode(10);
        TreeNode p4 = new TreeNode(100);
        TreeNode p5 = new TreeNode(6);
        TreeNode p6 = new TreeNode(7);
        TreeNode p7 = new TreeNode(70);
        p.left = p1; p.right = p2; p1.left = p3; p1.right = p4; p2.left = p5; p2.right = p6;
        // 继续测试
        p3.left = p7;
        // 准备第二棵树
        TreeNode q = new TreeNode(1);
        TreeNode q1 = new TreeNode(2);
        TreeNode q2 = new TreeNode(3);
        TreeNode q3 = new TreeNode(10);
        TreeNode q4 = new TreeNode(100);
        TreeNode q5 = new TreeNode(6);
        TreeNode q6 = new TreeNode(7);
        TreeNode q7 = new TreeNode(70);
        q.left = q1; q.right = q2; q1.left = q3; q1.right = q4; q2.left = q5; q2.right = q6;
        q3.left = q7;


        //boolean success = isSameTree(p,q);
        boolean success = isSameTreeUsingBFS(p,q);
        System.out.println(success);
    }
    /*
    深度优先遍历，上一文中有
    */
    public static boolean isSameTree(TreeNode p, TreeNode q) {
        // 如果两个结点都同时到达了叶子结点的的左右子节点，那么就是空的null那么就是相同结构
        if(p == null && q == null) {
            return true;
        }else if(p == null || q == null ){
            // 如果有一个不为空，但另外一个为空。那就是不相同的结构
            return false;
        }else if(p.val == q.val){
            // 如果当前两个结点的值是相同的，那么现在递归判断左右子树是不是相同的
            return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        }else{
            // 那么就是当前两个结点的值是不相同的，那么返回false
            return false;
        }
    }

    /**
     * 使用宽度优先遍历判断两个是不是相同的树
     * @param p 树1
     * @param q 树2
     * @return 是不是相同的树
     * 注意：本解法中条件判断太多，写的很冗余，不太好，但是也算是成功了
     */
    public static boolean isSameTreeUsingBFS(TreeNode p,TreeNode q){
        // 是不是空树
        if( p == null && q == null) { return true; }
        // 判断当一棵树是空树，一棵树不是空树的情况 --> 到这里说明两个至少有一个不是空树
        if( p == null || q == null) { return false; }
        // 准备一个队列。链表，在LinkedList中已经实现了完成了队列
        Queue<TreeNode> queue_1 = new LinkedList<>();
        Queue<TreeNode> queue_2 = new LinkedList<>();
        queue_1.offer(p); queue_2.offer(q);
        // 只要有一个为空，就说明结构可能不相同，那就要看看两个是不是同时退出
        while ( !queue_1.isEmpty() && !queue_2.isEmpty()) {
            TreeNode node_1 = queue_1.poll();
            TreeNode node_2 = queue_2.poll();
            if(node_1.val != node_2.val){
                return false;
            }
            // 准备好当前两棵树结点对应的左右子结点
            TreeNode left_1 = node_1.left, right_1 = node_1.right;
            TreeNode left_2 = node_2.left, right_2 = node_2.right;
            if( left_1 == null && left_2 != null){
                // 说明至少有一个为空
                return false;
            } else if( left_1 != null && left_2 == null){
                return false;
            } else if(left_1 != null && left_2 != null){
                queue_1.offer(left_1); queue_2.offer(left_2);
            }

            if( right_1 == null && right_2 != null){
                // 说明至少有一个为空
                return false;
            } else if( right_1 != null && right_2 == null){
                return false;
            } else if(right_2 != null && right_1 != null){
                queue_1.offer(right_1); queue_2.offer(right_2);
            }
            // 说明到这里可能是left_1 为空 left_2 不为空
            // 但也有空能两个队列都为空，那就说明时相同的，那么就要加个判断就可以了

        }
        return queue_1.isEmpty() && queue_2.isEmpty();
    }
    /*
    官方解答：不错，写的很简洁
    */
    public static boolean isSameTree官解(TreeNode p,TreeNode q){
        if (p == null && q == null) {
            return true;
        } else if (p == null || q == null) {
            return false;
        }
        Queue<TreeNode> queue1 = new LinkedList<TreeNode>();
        Queue<TreeNode> queue2 = new LinkedList<TreeNode>();
        queue1.offer(p);
        queue2.offer(q);
        while (!queue1.isEmpty() && !queue2.isEmpty()) {
            TreeNode node1 = queue1.poll();
            TreeNode node2 = queue2.poll();
            if (node1.val != node2.val) {
                return false;
            }
            TreeNode left1 = node1.left, right1 = node1.right, left2 = node2.left, right2 = node2.right;
            if (left1 == null ^ left2 == null) {
                return false;
            }
            if (right1 == null ^ right2 == null) {
                return false;
            }
            if (left1 != null) {
                queue1.offer(left1);
            }
            if (right1 != null) {
                queue1.offer(right1);
            }
            if (left2 != null) {
                queue2.offer(left2);
            }
            if (right2 != null) {
                queue2.offer(right2);
            }
        }
        return queue1.isEmpty() && queue2.isEmpty();
    }
}

class TreeNode{
    int val;
    TreeNode left;
    TreeNode right;
    public TreeNode(){}
    public TreeNode(int val) { this.val = val; }
