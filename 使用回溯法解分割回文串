import java.util.ArrayList;
import java.util.List;

/**
 * onLocation：551 --> 使用回溯法解分割回文串
 * @author 小晨Yu呀！
 * @ 2021/5/12 15:23
 * 使用回溯算法完成：分割字符串组成的子串是一个回文串
 *      1、使用回溯，选择路径
 *      2、每次选择一个字符组成字符串，就要判断一次这个路劲组成的字符串是不是回文
 * 注意了：这个实际上还是没有完全的懂了，所以还是的多看看，多学学
 */
public class RecursionCodeTest04 {
    public static void main(String[] args) {
        List<List<String>> lists = new ArrayList<>();
        getPalindrome_1("aab",0,lists,new ArrayList<>());
        for (List<String> l1 : lists){
            System.out.print("[");
            for (String s : l1){
                System.out.print(" "+s+" ");
            }
            System.out.print("]\n");
        }

    }
    /**
     * 获得回文字串的方法
     * @param s 母串，字符是其中字符的路径组合 时钟是不会变的，会变的就是从什么下标开始截取
     * @param lists 所有符合的条件的子串集合
     * @param start 从字符串哪里开始选择字符的下标
     * @param cur 当前所选择的字符子串
     */
    public static void getPalindrome_1(String s, int start, List<List<String>> lists, List<String> cur){
        // 终止条件
        if(start >= s.length()){
            // 既然选择到了最后一个字符那就说明之前的所有字符组合是没有问题的，就是回文，
            // 那就可以帮当前路径组合的字符子串【cur】添加到【lists】当中
            lists.add(new ArrayList<>(cur));
            return;
        }
       
        // 这里有点那种意思：就是首次截取几个
        for (int i = start; i < s.length(); i++) {
            if(!checkPalindrome_1(s,start,i)){
                // 这里就要判断截取的这一个字符是不是回文，不是的话，就不用添加了，直接跳到下一个字符选择
                continue;
            }
            // 到这里说明是回文，那就将当前路径添加到当前的集合当中[当前路径：start - i就是说明是回文就保存]
            cur.add(s.substring(start,i+1));
            // 继续进行回溯选择
            getPalindrome_1(s,i+1,lists,cur);
            // 这里就说明现在选择的回文是不正确的，那就删除最后一位
            cur.remove(cur.size() - 1);
        }
    }

    /**
     * 检查路劲组合的字符串是不是回文
     * @param s  从哪里获取路径，就是员源字符串
     */
    public static boolean checkPalindrome_1(String s, int left, int right){
        while(left < right){
            if(s.charAt(left++) != s.charAt(right--))  { return false; }
        }
        return true;
    }
}
